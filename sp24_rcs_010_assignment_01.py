# -*- coding: utf-8 -*-
"""SP24-RCS-010_Assignment_01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jOwoB_Bd3Gijjud8oNiq_Jzk9rIRJkA6
"""

# 1.1: Create a list: nums= [3,5,7,8,12] make another named 'cubes' and append the cubes of the given list 'nums' in this list and print it

nums = [3, 5, 7, 8, 12]
cubes = []
for num in nums:
  cubes.append(num ** 3)
print(cubes)

# 1.2: Create an empty dictionary: dict = {}, add the following data to the dictionary: ‘parrot’: 2, ‘goat’: 4, ‘spider’: 8, ‘crab’:
# 10 as key value pairs.

dict = {}
dict['parrot'] = 2
dict['goat'] = 4
dict['spider'] = 8
dict['crab'] = 10

# 1.3: Use the ‘items’ method to loop over the dictionary (dict) and print the animals and their corresponding legs. Sum
# the legs of each animal, and print the total at the end.

total_legs = 0
for animal, legs in dict.items():
  print(f"{animal} has {legs} legs.")
  total_legs += legs

print(f"Total legs: {total_legs}")

# 1.4: Create a tuple: A = (3, 9, 4, [5, 6]), change the value in the list from ‘5’ to ‘8’.

A = (3, 9, 4, [5, 6])
A[3][0] = 8
print(A)

# 1.5: Delete the tuple A.

A = (3, 9, 4, [5, 6])
A[3][0] = 8
print(A)

del A

# 1.6: Create another tuple: B = (‘a’, ‘p’, ‘p’, ‘l’, ‘e’), print the number of occurrences of ‘p’ in the tuple.

B = ('a', 'p', 'p', 'l', 'e')
print(B.count('p'))

# 1.7: Print the index of ‘l’ in the tuple.

B = ('a', 'p', 'p', 'l', 'e')
print(B.index('l'))

import numpy as np

# 2.1 Convert matrix A into numpy array
# Original matrix A
matrix_A = [[1, 2, 3, 4],
            [5, 6, 7, 8],
            [9, 10, 11, 12]]

A = np.array(matrix_A)
print("Original matrix A (as a list of lists):\n", matrix_A)
print("\nConverted numpy array A:\n", A)

# 2.2 Use slicing to pull out the subarray consisting of the first 2 rows and columns 1 and 2

b = A[:2, :2]

print("\nSubarray b (first 2 rows and columns 1 and 2):\n", b)

# 2.3 Create an empty matrix ‘C’ with the same shape as ‘A’

C = np.empty_like(A)

print("\nEmpty Matrix",C)

# 2.4 Add the vector z to each column of the matrix ‘A’ with an explicit loop and store it in ‘C’

z = np.array([1, 0, 1])

for i in range(A.shape[1]):  # iterate over columns
    C[:, i] = A[:, i] + z
    print("\nVector Z added:",C)

# 2.5 Add and print the matrices X and Y

X = np.array([[1, 2],
              [3, 4]])
Y = np.array([[5, 6],
              [7, 8]])

sum_X_Y = X + Y
print("\nSum of X and Y:\n", sum_X_Y)

# 2.6 Multiply and print the matrices X and Y

product_X_Y = np.dot(X, Y)

print("\nProduct of X and Y:\n", product_X_Y)

# 2.7 Compute and print the element-wise square root of matrix Y

sqrt_Y = np.sqrt(Y)

print("\nElement-wise square root of Y:\n", sqrt_Y)

# 2.8 Compute and print the dot product of the matrix X and vector v

v = np.array([9, 10])

dot_X_v = np.dot(X, v)

print("\nDot product of X and v:\n", dot_X_v)

# 2.9 Compute and print the sum of each column of X

sum_columns_X = np.sum(X, axis=0)

print("\nSum of each column of X:\n", sum_columns_X)

# 3.1 Create a function ‘Compute’ that takes two arguments, distance and time, and use it to calculate velocity. and print it

def Compute(distance, time):
  if time == 0:
    return "Time cannot be zero."
  else:
    velocity = distance / time
    return velocity

#for example:
distance = 100
time = 2

velocity = Compute(distance, time)
print(f"Velocity: {velocity}")

# 3.2 Make a list named ‘even_num’ that contains all even numbers up till 12. Create a function ‘mult’ that takes the list
# ‘even_num’ as an argument and calculates the products of all entries using a for loop.

def mult(even_num):

  product = 1
  for num in even_num:
    product *= num
  return product

# Create the list of even numbers
even_num = [x for x in range(2, 13, 2)]
print("\nEven Numbers:",even_num)

# Calculate the product of all entries
result = mult(even_num)
print(f"The product of all even numbers up to 12 is: {result}")

# Task 4: Create Panda DataFrame
import pandas as pd

# Creating a DataFrame with the given data
data = {'C1': [1, 2, 3, 5, 5],
        'C2': [6, 7, 5, 4, 8],
        'C3': [7, 9, 8, 6, 5],
        'C4': [7, 5, 2, 8, 8]}

# Creating the dataframe
df = pd.DataFrame(data)

# Displaying the dataframe
print("DataFrame 'pd':\n", df)

# 4.1: Print only the first two rows of the dataframe.

print(df.head(2))

# 4.2: Print the second column.

print(df.columns)
print(df["C2"])

# 4.3: Change the name of the third column from ‘C3’ to ‘B3’.

df = df.rename(columns={'C3': 'B3'})
print(df)

# 4.4: Add a new column to the dataframe and name it ‘Sum’.

df['Sum'] = df.sum(axis=1)
print(df)

# 4.5: Sum the entries of each row and add the result in the column ‘Sum’.

df['Sum'] = df.sum(axis=1)
print(df)

# 4.6: Read CSV file named ‘hello_sample.csv’ (the file is available in the class Google Drive shared folder) into a Pandas dataframe.

import pandas as pd

df = pd.read_csv('/content/drive/MyDrive/hello_sample.csv')
print(df)

from google.colab import drive
drive.mount('/content/drive')

# 4.7: Print complete dataframe.

print(df)

# 4.8: Print only bottom 2 records of the dataframe.

print(df.tail(2))

# 4.9: Print information about the dataframe.

print(df.info())

# 4.10: Print shape (rows x columns) of the dataframe.

print(df.shape)

# 4.11: Sort the data of the dataFrame using column ‘Weight’.

# Assuming 'df' is your DataFrame and 'Weight' is the column name
df_sorted = df.sort_values(by='Weight')
print(df_sorted)

# 4.12: Use isnull() and dropna() methods of the Pandas dataframe and see if they produce any changes.

# Check for null values
print(df.isnull())

# Drop rows with null values
df_dropped = df.dropna()
print(df_dropped)